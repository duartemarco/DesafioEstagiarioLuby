// Nessa pasta para o programa não ficar com dois entry points e poder ser compilado.

using System.Globalization;

internal class Program
{
    private static void Main(string[] args)
    {
        //1.1
        CalcularFatorial(5);//120

        //1.2
        CalcularPremio(100, "vip", null);//120
        CalcularPremio(100, "basic", 3);//300

        //1.3
        ContarNumerosPrimos(10);//4

        //1.4
        CalcularVogais("Luby Software");//4

        //1.5
        CalcularValorComDescontoFormatado("R$ 6.800,00", "30%");//"R$ 4.760,00"

        //1.6
        CalcularDiferencaData("10122020", "25122020");//15

        //1.7
        int[] vetor = new int[] { 1, 2, 3, 4, 5 };
        ObterElementosPares(vetor); //{2,4}

        //1.8
        string[] vetor2 = new string[] {
            "John Doe",
            "Jane Doe",
            "Alice Jones",
            "Bobby Louis",
            "Lisa Romero"
        };
        BuscarPessoa(vetor2, "Doe");//true
        BuscarPessoa(vetor2, "Alice");//true
        BuscarPessoa(vetor2, "James");//true


    }

    //1.1 Implemente a função abaixo para calcular fatorial de um número.
    private static int CalcularFatorial(int a)
    {
        int resposta = 1;
        for (int i = a; i >= 1; i--)
        {
            resposta *= i;
        }
        return resposta;
    }

    //1.2 Implemente a função abaixo que calcula o valor total do prêmio somando fator do tipo do prêmio conforme valores:
    private static int? CalcularPremio(double premio, string plano, double? fator)
    {
        if (premio > 0 && fator.HasValue)
        {
            // Fator sobrescreve o plano
            return (int)(premio * fator.Value);
        }
        else
        {
            switch (plano)
            {
                case "basic":
                    fator = 1.0;
                    break;
                case "vip":
                    fator = 1.2;
                    break;
                case "premium":
                    fator = 1.5;
                    break;
                case "deluxe":
                    fator = 1.8;
                    break;
                case "special":
                    fator = 2.0;
                    break;
                default:
                    fator = 1.0;
                    break;
            }
            return (int)(premio * fator);
        }
    }

    
    //1.3 Implemente a função abaixo para contar quantos números primos existe até o número informado.
    private static int ContarNumerosPrimos(int valor)
    {
        int contador = 0;
        for (int i = 2; i <= valor; i++)
        {
            if (VerificaPrimo(i)) contador++;
        }
        return contador;
    }

    private static bool VerificaPrimo(int valor)
    {
        if (valor <= 1) return false;
        if (valor <= 3) return true;

        if (valor % 2 == 0 || valor % 3 == 0) return false;

        for (int i = 5; i * i <= valor; i += 6)
        {
            if (valor % i == 0 || valor % (i + 2) == 0) return false;
        }

        return true;
    }
    
    //1.4 Implemente a função abaixo que conta e calcula a quantidade de vogais dentro de uma string.
    private static int CalcularVogais(string palavra)
    {
        int contagem = 0;
        palavra = palavra.ToLower();
        for (int i = 0; i < palavra.Length; i++)
        {
            if (palavra[i] == 'a' || palavra[i] == 'e' || palavra[i] == 'i' || palavra[i] == 'o' || palavra[i] == 'u')
            {
                contagem++;
            }
        }
        return contagem;
    }

    //1.5 Implemente a função abaixo que aplica uma porcentagem de desconto a um valor e retorna o resultado.
    private static string CalcularValorComDescontoFormatado(string valor, string desconto)
    {
        decimal value = decimal.Parse(valor.Replace("R$", "").Replace(".", "").Replace(",", "."));
        decimal discount = decimal.Parse(desconto.Replace("%", "")) / 100;
        decimal resultado = value * (1 - discount);
        return string.Format("R$ {0:#,0.00}", resultado);
    }

    //1.6 Implemente a função abaixo que obtém duas string de datas e calcula a diferença de dias entre elas.
    private static int CalcularDiferencaData(string data1, string data2)
    {
        CultureInfo ptBR = new CultureInfo("pt-BR");
        DateTime dataConvertida1 = DateTime.ParseExact(data1, "ddMMyyyy", ptBR, DateTimeStyles.None);
        DateTime dataConvertida2 = DateTime.ParseExact(data2, "ddMMyyyy", ptBR, DateTimeStyles.None);
        TimeSpan diferenca = dataConvertida2 - dataConvertida1;
        return diferenca.Days;
    }

    //1.7 Implemente a função abaixo que retorna um novo vetor com todos elementos pares do vetor informado.
    private static int[] ObterElementosPares(Array vetor)
    {
        try
        {

        int tamanho = 0;
        for (int i = 0; i < vetor.Length; i++)
        {
            if ((int)vetor.GetValue(i) % 2 == 0)
            {
               //Console.WriteLine(i); 
               tamanho++;
            }
        }

        int[] vetorNovo = new int [tamanho];
        int index = 0;

        for (int i = 0; i < vetor.Length; i++)
        {
            if ((int)vetor.GetValue(i) % 2 == 0)
            {
                //Console.WriteLine(i); 
                vetorNovo[index] = (int)vetor.GetValue(i);
                index++;
            }
        }
        return vetorNovo;

        } catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return null;
        }
    }

    //1.8 Implemente a função abaixo que deve buscar um ou mais elementos no vetor que contém o valor ou parte do valor informado na busca.
    static string[] BuscarPessoa(string[] vetor, string busca)
    {
        return Array.FindAll(vetor, pessoa => pessoa.Contains(busca));
    }

    static bool ArraysSaoIguais(string[] array1, string[] array2)
    {
        if (array1.Length != array2.Length) return false;

        for (int i = 0; i < array1.Length; i++)
        {
            if (array1[i] != array2[i]) return false;
        }

        return true;
    }

    //1.9 Implemente a função abaixo que obtém uma string com números separados por vírgula e transforma em um
    //array de array de inteiros com no máximo dois elementos.
    private static string TransformarEmMatriz(string valores)
    {
        return "";
    }

    //1.10 Implemente a função abaixo que compara dois vetores e cria um novo vetor com os elementos faltantes de ambos.
    private static int ObterElementosFaltantes(Array vetor1, Array vetor2)
    {
        return 0;
    }
}